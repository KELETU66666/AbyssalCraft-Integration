buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
		maven {
            // Required for the curseforge task
            name = "gradle"
            url "https://plugins.gradle.org/m2/"
        }
		
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.0"
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'

repositories {
	maven {
		name 'Progwml6'
		url "http://dvs1.progwml6.com/files/maven"
	}
/*	ivy {
		name "Thaumcraft"
		artifactPattern "https://dl.dropboxusercontent.com/u/47135879/[module]-1.12.2-[revision]-deobf.[ext]"
	}*/
	// maven {
	// 	name 'shinoow'
	// 	url 'https://dl.bintray.com/shinoow/maven/'
	// }
    maven {
        name 'ModMaven'
        url 'https://modmaven.dev'
    }
	maven {
        name 'jared'
        url "http://maven.blamejared.com/"
    }
	maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
	}
	maven {
		name 'Darkhax'
		url "https://maven.mcmoddev.com/"
	}
}

ext.propFile = file "build.properties"

propFile.withReader {
	
	def prop = new Properties()
	prop.load(it)
	project.ext.props = new ConfigSlurper().parse prop
}

version = props.aci_version
group= "com.shinoow.acintegration" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "AbyssalCraft Integration"

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.12.2-14.23.5.2815"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180421"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	useDepAts = true
	
		replaceIn "ACIntegration.java"
            replace "forgeversion", props.forge_version
			replace "aci_version", props.aci_version
			replace "cert_fingerprint", project.findProperty('signSHA1')
}

dependencies {
	//compile "com.pahimar.ee3:EquivalentExchange3:1.7.10-0.3.507:dev"

	deobfCompile "mezz.jei:jei_1.12.2:4.14.4.264"
	//deobfCompile name: 'Thaumcraft', version: "6.1.BETA11", ext: 'jar'
	deobfCompile "slimeknights.mantle:Mantle:1.12-1.3.1.21"
    deobfCompile "slimeknights:TConstruct:1.12-2.7.4.34"
	deobfCompile "com.shinoow.abyssalcraft:AbyssalCraft:1.12.2-1.9.19"
    deobfCompile "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.0.0.8"
	//deobfCompile "better-questing:BetterQuesting:1.3.180"
	deobfCompile "net.darkhax.bookshelf:Bookshelf-1.12.2:2.3.556"
    deobfCompile "net.darkhax.gamestages:GameStages-1.12.2:2.0.98"
    deobfCompile "bewitchment:bewitchment:1.12.2:0.0.20.3";
}

version = "${props.mc_version}-${props.aci_version}"

processResources
{
	// I really don't want that file to exist anywhere
	exclude '**/Thumbs.db'

	// this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
	
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
		include 'version.properties'

        // replace version and mcversion
        expand ([
			'version':project.version,
			'aciversion':project.props.aci_version,
			'mcversion':project.props.mc_version,
			'forgeversion':project.props.forge_version
		])
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'version.properties'
    }
}

task srcJar(type: Jar) {
    from sourceSets.main.allJava
	
	extension = 'jar'
	classifier = 'sources'
}

artifacts {
    archives srcJar
}

curseforge {
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : '' // gradle curse -Pcurseforge_key=your-api-key
    project {
		id   = "234851" // http://minecraft.curseforge.com/mc-mods/"xxxxxx"-projectname
		releaseType = project.props.release_type //alpha beta release
		changelogType = 'html'
		changelog   = new File('changelog.html') //must have at least an empty string
		addArtifact srcJar
		
		relations{
			requiredDependency 'abyssalcraft'
			optionalDependency 'crafttweaker'
			optionalDependency 'projecte'
			optionalDependency 'thaumcraft'
			optionalDependency 'tinkers-construct'
			//optionalDependency 'better-questing'
			optionalDependency 'game-stages'
            optionalDependency 'bewitchment'
		}
	}
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran. 
build.dependsOn signJar

//copies the source files over to the folder from which they will be included in a RAR-file
task prepareFiles(type: Copy){
    from "$rootDir"
        include "build.gradle"
        include "build.properties"
        include "changelog.html"
        include "gradle.properties"
        include "src/main/**"
    into "$buildDir/rarTemp"

    String filePath = "${project.findProperty("sourceDirACI")}/ACI source ${props.aci_version} (${props.mc_version}).rar"
    String filePath1 = "${buildDir}/rarTemp/*"

    new File(projectDir, "generateRAR.bat").text = project.findProperty("rarCommand")+' "'+filePath+'" "'+filePath1+'"';
}

//copies the src jar to the place where binaries are stored
task copySrcJar(type: Copy){
    from srcJar
    into "${project.findProperty("binariesDir")}/${archivesBaseName}/jars"
}

//copies the main jar to the place where binaries are stored
task copyJar(type: Copy){
    from jar
    into "${project.findProperty("binariesDir")}/${archivesBaseName}/jars"
}

//generates a jar file with the source code and gradle files, then places it in a good place
task generateRar(type: Exec){
    
    commandLine 'cmd', "/c", "generateRAR.bat";
    ignoreExitValue = true
}

//runs all of the tasks for building and deploying
task buildAndDeploy(){
    dependsOn 'clean'
    dependsOn 'build'
    dependsOn 'curseforge'
    dependsOn 'copySrcJar'
    dependsOn 'copyJar'
    dependsOn 'prepareFiles'
    dependsOn 'generateRar'
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('curseforge').mustRunAfter 'build'
    tasks.findByName('prepareFiles').mustRunAfter 'build'
    tasks.findByName('generateRar').mustRunAfter 'prepareFiles'
    tasks.findByName('copySrcJar').mustRunAfter 'prepareFiles'
    tasks.findByName('copyJar').mustRunAfter 'prepareFiles'
}

//final cleanup
buildAndDeploy.doLast {
    delete "${buildDir}/rarTemp/"
    delete "generateRAR.bat"
}
